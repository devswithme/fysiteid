/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as PublicRouteImport } from './routes/_public'
import { Route as AuthRouteImport } from './routes/_auth'
import { Route as PublicIndexRouteImport } from './routes/_public/index'
import { Route as PublicUsernameRouteImport } from './routes/_public/$username'
import { Route as PublicVerifyIndexRouteImport } from './routes/_public/verify/index'
import { Route as AuthDashIndexRouteImport } from './routes/_auth/dash/index'
import { Route as AuthDashHistoryRouteImport } from './routes/_auth/dash/history'
import { Route as PublicTicketIdIndexRouteImport } from './routes/_public/ticket/$id/index'
import { Route as AuthDashTicketIndexRouteImport } from './routes/_auth/dash/ticket/index'
import { Route as AuthDashTicketIdIndexRouteImport } from './routes/_auth/dash/ticket/$id/index'

const PublicRoute = PublicRouteImport.update({
  id: '/_public',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthRoute = AuthRouteImport.update({
  id: '/_auth',
  getParentRoute: () => rootRouteImport,
} as any)
const PublicIndexRoute = PublicIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => PublicRoute,
} as any)
const PublicUsernameRoute = PublicUsernameRouteImport.update({
  id: '/$username',
  path: '/$username',
  getParentRoute: () => PublicRoute,
} as any)
const PublicVerifyIndexRoute = PublicVerifyIndexRouteImport.update({
  id: '/verify/',
  path: '/verify/',
  getParentRoute: () => PublicRoute,
} as any)
const AuthDashIndexRoute = AuthDashIndexRouteImport.update({
  id: '/dash/',
  path: '/dash/',
  getParentRoute: () => AuthRoute,
} as any)
const AuthDashHistoryRoute = AuthDashHistoryRouteImport.update({
  id: '/dash/history',
  path: '/dash/history',
  getParentRoute: () => AuthRoute,
} as any)
const PublicTicketIdIndexRoute = PublicTicketIdIndexRouteImport.update({
  id: '/ticket/$id/',
  path: '/ticket/$id/',
  getParentRoute: () => PublicRoute,
} as any)
const AuthDashTicketIndexRoute = AuthDashTicketIndexRouteImport.update({
  id: '/dash/ticket/',
  path: '/dash/ticket/',
  getParentRoute: () => AuthRoute,
} as any)
const AuthDashTicketIdIndexRoute = AuthDashTicketIdIndexRouteImport.update({
  id: '/dash/ticket/$id/',
  path: '/dash/ticket/$id/',
  getParentRoute: () => AuthRoute,
} as any)

export interface FileRoutesByFullPath {
  '/$username': typeof PublicUsernameRoute
  '/': typeof PublicIndexRoute
  '/dash/history': typeof AuthDashHistoryRoute
  '/dash': typeof AuthDashIndexRoute
  '/verify': typeof PublicVerifyIndexRoute
  '/dash/ticket': typeof AuthDashTicketIndexRoute
  '/ticket/$id': typeof PublicTicketIdIndexRoute
  '/dash/ticket/$id': typeof AuthDashTicketIdIndexRoute
}
export interface FileRoutesByTo {
  '/$username': typeof PublicUsernameRoute
  '/': typeof PublicIndexRoute
  '/dash/history': typeof AuthDashHistoryRoute
  '/dash': typeof AuthDashIndexRoute
  '/verify': typeof PublicVerifyIndexRoute
  '/dash/ticket': typeof AuthDashTicketIndexRoute
  '/ticket/$id': typeof PublicTicketIdIndexRoute
  '/dash/ticket/$id': typeof AuthDashTicketIdIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/_auth': typeof AuthRouteWithChildren
  '/_public': typeof PublicRouteWithChildren
  '/_public/$username': typeof PublicUsernameRoute
  '/_public/': typeof PublicIndexRoute
  '/_auth/dash/history': typeof AuthDashHistoryRoute
  '/_auth/dash/': typeof AuthDashIndexRoute
  '/_public/verify/': typeof PublicVerifyIndexRoute
  '/_auth/dash/ticket/': typeof AuthDashTicketIndexRoute
  '/_public/ticket/$id/': typeof PublicTicketIdIndexRoute
  '/_auth/dash/ticket/$id/': typeof AuthDashTicketIdIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/$username'
    | '/'
    | '/dash/history'
    | '/dash'
    | '/verify'
    | '/dash/ticket'
    | '/ticket/$id'
    | '/dash/ticket/$id'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/$username'
    | '/'
    | '/dash/history'
    | '/dash'
    | '/verify'
    | '/dash/ticket'
    | '/ticket/$id'
    | '/dash/ticket/$id'
  id:
    | '__root__'
    | '/_auth'
    | '/_public'
    | '/_public/$username'
    | '/_public/'
    | '/_auth/dash/history'
    | '/_auth/dash/'
    | '/_public/verify/'
    | '/_auth/dash/ticket/'
    | '/_public/ticket/$id/'
    | '/_auth/dash/ticket/$id/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  AuthRoute: typeof AuthRouteWithChildren
  PublicRoute: typeof PublicRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_public': {
      id: '/_public'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof PublicRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_auth': {
      id: '/_auth'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_public/': {
      id: '/_public/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof PublicIndexRouteImport
      parentRoute: typeof PublicRoute
    }
    '/_public/$username': {
      id: '/_public/$username'
      path: '/$username'
      fullPath: '/$username'
      preLoaderRoute: typeof PublicUsernameRouteImport
      parentRoute: typeof PublicRoute
    }
    '/_public/verify/': {
      id: '/_public/verify/'
      path: '/verify'
      fullPath: '/verify'
      preLoaderRoute: typeof PublicVerifyIndexRouteImport
      parentRoute: typeof PublicRoute
    }
    '/_auth/dash/': {
      id: '/_auth/dash/'
      path: '/dash'
      fullPath: '/dash'
      preLoaderRoute: typeof AuthDashIndexRouteImport
      parentRoute: typeof AuthRoute
    }
    '/_auth/dash/history': {
      id: '/_auth/dash/history'
      path: '/dash/history'
      fullPath: '/dash/history'
      preLoaderRoute: typeof AuthDashHistoryRouteImport
      parentRoute: typeof AuthRoute
    }
    '/_public/ticket/$id/': {
      id: '/_public/ticket/$id/'
      path: '/ticket/$id'
      fullPath: '/ticket/$id'
      preLoaderRoute: typeof PublicTicketIdIndexRouteImport
      parentRoute: typeof PublicRoute
    }
    '/_auth/dash/ticket/': {
      id: '/_auth/dash/ticket/'
      path: '/dash/ticket'
      fullPath: '/dash/ticket'
      preLoaderRoute: typeof AuthDashTicketIndexRouteImport
      parentRoute: typeof AuthRoute
    }
    '/_auth/dash/ticket/$id/': {
      id: '/_auth/dash/ticket/$id/'
      path: '/dash/ticket/$id'
      fullPath: '/dash/ticket/$id'
      preLoaderRoute: typeof AuthDashTicketIdIndexRouteImport
      parentRoute: typeof AuthRoute
    }
  }
}

interface AuthRouteChildren {
  AuthDashHistoryRoute: typeof AuthDashHistoryRoute
  AuthDashIndexRoute: typeof AuthDashIndexRoute
  AuthDashTicketIndexRoute: typeof AuthDashTicketIndexRoute
  AuthDashTicketIdIndexRoute: typeof AuthDashTicketIdIndexRoute
}

const AuthRouteChildren: AuthRouteChildren = {
  AuthDashHistoryRoute: AuthDashHistoryRoute,
  AuthDashIndexRoute: AuthDashIndexRoute,
  AuthDashTicketIndexRoute: AuthDashTicketIndexRoute,
  AuthDashTicketIdIndexRoute: AuthDashTicketIdIndexRoute,
}

const AuthRouteWithChildren = AuthRoute._addFileChildren(AuthRouteChildren)

interface PublicRouteChildren {
  PublicUsernameRoute: typeof PublicUsernameRoute
  PublicIndexRoute: typeof PublicIndexRoute
  PublicVerifyIndexRoute: typeof PublicVerifyIndexRoute
  PublicTicketIdIndexRoute: typeof PublicTicketIdIndexRoute
}

const PublicRouteChildren: PublicRouteChildren = {
  PublicUsernameRoute: PublicUsernameRoute,
  PublicIndexRoute: PublicIndexRoute,
  PublicVerifyIndexRoute: PublicVerifyIndexRoute,
  PublicTicketIdIndexRoute: PublicTicketIdIndexRoute,
}

const PublicRouteWithChildren =
  PublicRoute._addFileChildren(PublicRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  AuthRoute: AuthRouteWithChildren,
  PublicRoute: PublicRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
