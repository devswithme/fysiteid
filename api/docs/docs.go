// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/auth/logout": {
            "post": {
                "description": "Remove token from cookies",
                "tags": [
                    "auth"
                ],
                "summary": "Logout",
                "responses": {
                    "200": {
                        "description": "Successfully logout",
                        "schema": {
                            "$ref": "#/definitions/dto.APIResponse-any"
                        }
                    }
                }
            }
        },
        "/auth/refresh": {
            "post": {
                "description": "Route to generate new access token",
                "tags": [
                    "auth"
                ],
                "summary": "Refresh token",
                "responses": {
                    "201": {
                        "description": "Successfully regenerate token",
                        "schema": {
                            "$ref": "#/definitions/dto.APIResponse-any"
                        }
                    },
                    "401": {
                        "description": "Failed to regenerate token",
                        "schema": {
                            "$ref": "#/definitions/dto.APIResponse-any"
                        }
                    }
                }
            }
        },
        "/login/google": {
            "get": {
                "description": "Oauth2 Google login entry",
                "tags": [
                    "login"
                ],
                "summary": "Google OAuth2 Login",
                "parameters": [
                    {
                        "type": "string",
                        "default": "/dash",
                        "description": "Redirect URL after login",
                        "name": "redirect",
                        "in": "query"
                    }
                ],
                "responses": {
                    "303": {
                        "description": "Redirected to Google login page",
                        "schema": {
                            "type": ""
                        }
                    },
                    "500": {
                        "description": "Failed to login",
                        "schema": {
                            "$ref": "#/definitions/dto.APIResponse-any"
                        }
                    }
                }
            }
        },
        "/login/google/callback": {
            "get": {
                "description": "Route to handle Google callback",
                "tags": [
                    "login"
                ],
                "summary": "Google OAuth2 Callback",
                "responses": {
                    "303": {
                        "description": "Redirected to frontend with desired redirect URL path",
                        "schema": {
                            "type": ""
                        }
                    },
                    "500": {
                        "description": "Failed to login",
                        "schema": {
                            "$ref": "#/definitions/dto.APIResponse-any"
                        }
                    }
                }
            }
        },
        "/public/ticket/id/{id}": {
            "get": {
                "description": "Get public ticket by ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ticket"
                ],
                "summary": "Get public by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully get public ticket by id",
                        "schema": {
                            "$ref": "#/definitions/dto.APIResponse-dto_TicketGet"
                        }
                    },
                    "500": {
                        "description": "Failed to get public ticket by id",
                        "schema": {
                            "$ref": "#/definitions/dto.APIResponse-any"
                        }
                    }
                }
            }
        },
        "/public/ticket/{username}": {
            "get": {
                "description": "Get public tickets by username",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ticket"
                ],
                "summary": "Get public by username",
                "parameters": [
                    {
                        "type": "string",
                        "description": "username",
                        "name": "username",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully get public tickets by username",
                        "schema": {
                            "$ref": "#/definitions/dto.APIResponse-array_dto_TicketPublicGet"
                        }
                    },
                    "500": {
                        "description": "Failed to get public tickets by username",
                        "schema": {
                            "$ref": "#/definitions/dto.APIResponse-any"
                        }
                    }
                }
            }
        },
        "/public/user/id/{ticketID}": {
            "get": {
                "description": "Get public user by ticket ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Get public by ticket ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ticket ID",
                        "name": "ticketID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully get public user by ticket id",
                        "schema": {
                            "$ref": "#/definitions/dto.APIResponse-dto_UserGet"
                        }
                    },
                    "500": {
                        "description": "Failed to get public user by ticket id",
                        "schema": {
                            "$ref": "#/definitions/dto.APIResponse-any"
                        }
                    }
                }
            }
        },
        "/public/user/{username}": {
            "get": {
                "description": "Get public user by username",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Get public by username",
                "parameters": [
                    {
                        "type": "string",
                        "description": "username",
                        "name": "username",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully get public user by username",
                        "schema": {
                            "$ref": "#/definitions/dto.APIResponse-dto_UserGet"
                        }
                    },
                    "500": {
                        "description": "Failed to get public user by username",
                        "schema": {
                            "$ref": "#/definitions/dto.APIResponse-any"
                        }
                    }
                }
            }
        },
        "/registrant": {
            "get": {
                "description": "Get registrants by userID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "registrant"
                ],
                "summary": "Get by userID",
                "responses": {
                    "200": {
                        "description": "Failed to get registrants by user id",
                        "schema": {
                            "$ref": "#/definitions/dto.APIResponse-array_dto_RegistrantGetByUserID"
                        }
                    },
                    "500": {
                        "description": "Failed to get registrants by user id",
                        "schema": {
                            "$ref": "#/definitions/dto.APIResponse-any"
                        }
                    }
                }
            }
        },
        "/registrant/gen/{ticketID}": {
            "get": {
                "description": "Generate unique id for private mode",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "registrant"
                ],
                "summary": "Generate",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Ticket ID",
                        "name": "ticketID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Successfully generating unique id",
                        "schema": {
                            "type": ""
                        }
                    },
                    "500": {
                        "description": "Failed generating unique id",
                        "schema": {
                            "type": ""
                        }
                    }
                }
            }
        },
        "/registrant/verify/{id}/{ticketID}": {
            "get": {
                "description": "Verify registrant by current user id and ticket id",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "registrant"
                ],
                "summary": "Verify",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Ticket ID",
                        "name": "ticketID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Registrant ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "303": {
                        "description": "Redirected to /verify?err=0?ticket=",
                        "schema": {
                            "type": ""
                        }
                    }
                }
            }
        },
        "/registrant/{ticketID}": {
            "get": {
                "description": "Get registrants by ticketID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "registrant"
                ],
                "summary": "Get by ticketID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Ticket ID",
                        "name": "ticketID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "page",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "limit",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "search",
                        "name": "search",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "all",
                        "name": "all",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully get registrants by ticket id",
                        "schema": {
                            "$ref": "#/definitions/dto.APIResponse-dto_PaginatedRegistrants"
                        }
                    },
                    "500": {
                        "description": "Failed to get registrants by ticket id",
                        "schema": {
                            "$ref": "#/definitions/dto.APIResponse-any"
                        }
                    }
                }
            },
            "post": {
                "description": "Create new registrant",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "registrant"
                ],
                "summary": "Create",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Ticket ID",
                        "name": "ticketID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "state",
                        "name": "state",
                        "in": "query"
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Successfully create registrant",
                        "schema": {
                            "$ref": "#/definitions/dto.APIResponse-any"
                        }
                    },
                    "500": {
                        "description": "Failed to create registrant",
                        "schema": {
                            "$ref": "#/definitions/dto.APIResponse-any"
                        }
                    }
                }
            }
        },
        "/ticket": {
            "get": {
                "description": "Get tickets",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ticket"
                ],
                "summary": "Get",
                "responses": {
                    "200": {
                        "description": "Successfully get tickets",
                        "schema": {
                            "$ref": "#/definitions/dto.APIResponse-array_dto_TicketGet"
                        }
                    },
                    "500": {
                        "description": "Failed to get tickets",
                        "schema": {
                            "$ref": "#/definitions/dto.APIResponse-any"
                        }
                    }
                }
            },
            "post": {
                "description": "Create new ticket",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ticket"
                ],
                "summary": "Create",
                "parameters": [
                    {
                        "type": "string",
                        "description": "title",
                        "name": "title",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "description",
                        "name": "description",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "boolean",
                        "description": "mode",
                        "name": "mode",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "quota",
                        "name": "quota",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "file",
                        "description": "image",
                        "name": "image",
                        "in": "formData"
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Successfully create ticket",
                        "schema": {
                            "$ref": "#/definitions/dto.APIResponse-any"
                        }
                    },
                    "500": {
                        "description": "Failed to create ticket",
                        "schema": {
                            "$ref": "#/definitions/dto.APIResponse-any"
                        }
                    }
                }
            }
        },
        "/ticket/{id}": {
            "get": {
                "description": "Get ticket by ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ticket"
                ],
                "summary": "Get by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully get ticket by id",
                        "schema": {
                            "$ref": "#/definitions/dto.APIResponse-dto_TicketGet"
                        }
                    },
                    "500": {
                        "description": "Failed to get ticket by id",
                        "schema": {
                            "$ref": "#/definitions/dto.APIResponse-any"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete ticket by ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ticket"
                ],
                "summary": "Delete",
                "parameters": [
                    {
                        "type": "string",
                        "description": "id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully delete ticket",
                        "schema": {
                            "$ref": "#/definitions/dto.APIResponse-any"
                        }
                    },
                    "500": {
                        "description": "Failed to delete ticket",
                        "schema": {
                            "$ref": "#/definitions/dto.APIResponse-any"
                        }
                    }
                }
            },
            "patch": {
                "description": "Update ticket by ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ticket"
                ],
                "summary": "Update",
                "parameters": [
                    {
                        "type": "string",
                        "description": "id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "title",
                        "name": "title",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "description",
                        "name": "description",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "boolean",
                        "description": "mode",
                        "name": "mode",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "quota",
                        "name": "quota",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "file",
                        "description": "image",
                        "name": "image",
                        "in": "formData"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully update ticket",
                        "schema": {
                            "$ref": "#/definitions/dto.APIResponse-any"
                        }
                    },
                    "500": {
                        "description": "Failed to update ticket",
                        "schema": {
                            "$ref": "#/definitions/dto.APIResponse-any"
                        }
                    }
                }
            }
        },
        "/user/me": {
            "get": {
                "description": "Get current logged-in user",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Get profile",
                "responses": {
                    "200": {
                        "description": "Successfully get current user",
                        "schema": {
                            "$ref": "#/definitions/dto.APIResponse-dto_UserGet"
                        }
                    },
                    "500": {
                        "description": "Failed to get current user",
                        "schema": {
                            "$ref": "#/definitions/dto.APIResponse-any"
                        }
                    }
                }
            },
            "patch": {
                "description": "Update current logged-in user",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Update user",
                "parameters": [
                    {
                        "type": "string",
                        "description": "name",
                        "name": "name",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "username",
                        "name": "username",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "file",
                        "description": "avatar",
                        "name": "avatar",
                        "in": "formData"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully update current user",
                        "schema": {
                            "$ref": "#/definitions/dto.APIResponse-any"
                        }
                    },
                    "400": {
                        "description": "Username already exists",
                        "schema": {
                            "$ref": "#/definitions/dto.APIResponse-any"
                        }
                    },
                    "500": {
                        "description": "Failed to update current user",
                        "schema": {
                            "$ref": "#/definitions/dto.APIResponse-any"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "dto.APIResponse-any": {
            "type": "object",
            "properties": {
                "data": {},
                "meta": {
                    "$ref": "#/definitions/dto.ApiMeta"
                }
            }
        },
        "dto.APIResponse-array_dto_RegistrantGetByUserID": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.RegistrantGetByUserID"
                    }
                },
                "meta": {
                    "$ref": "#/definitions/dto.ApiMeta"
                }
            }
        },
        "dto.APIResponse-array_dto_TicketGet": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.TicketGet"
                    }
                },
                "meta": {
                    "$ref": "#/definitions/dto.ApiMeta"
                }
            }
        },
        "dto.APIResponse-array_dto_TicketPublicGet": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.TicketPublicGet"
                    }
                },
                "meta": {
                    "$ref": "#/definitions/dto.ApiMeta"
                }
            }
        },
        "dto.APIResponse-dto_PaginatedRegistrants": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/dto.PaginatedRegistrants"
                },
                "meta": {
                    "$ref": "#/definitions/dto.ApiMeta"
                }
            }
        },
        "dto.APIResponse-dto_TicketGet": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/dto.TicketGet"
                },
                "meta": {
                    "$ref": "#/definitions/dto.ApiMeta"
                }
            }
        },
        "dto.APIResponse-dto_UserGet": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/dto.UserGet"
                },
                "meta": {
                    "$ref": "#/definitions/dto.ApiMeta"
                }
            }
        },
        "dto.ApiMeta": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                },
                "request_id": {
                    "type": "string"
                },
                "success": {
                    "type": "boolean"
                }
            }
        },
        "dto.PaginatedRegistrants": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.RegistrantGetByTicketID"
                    }
                },
                "limit": {
                    "type": "integer"
                },
                "page": {
                    "type": "integer"
                },
                "total": {
                    "type": "integer"
                },
                "total_pages": {
                    "type": "integer"
                }
            }
        },
        "dto.RegistrantGetByTicketID": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "is_verified": {
                    "type": "boolean"
                },
                "picture": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "dto.RegistrantGetByUserID": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "image": {
                    "type": "string"
                },
                "is_verified": {
                    "type": "boolean"
                },
                "ticket_id": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                },
                "url": {
                    "type": "string"
                }
            }
        },
        "dto.TicketGet": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "image": {
                    "type": "string"
                },
                "mode": {
                    "type": "boolean"
                },
                "quota": {
                    "type": "integer"
                },
                "registered_count": {
                    "type": "integer"
                },
                "title": {
                    "type": "string"
                }
            }
        },
        "dto.TicketPublicGet": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "image": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                }
            }
        },
        "dto.UserGet": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                },
                "picture": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:3000",
	BasePath:         "/api/v1",
	Schemes:          []string{},
	Title:            "FyAPI",
	Description:      "",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
